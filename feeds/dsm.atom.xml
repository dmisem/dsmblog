<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Записки ДСМ</title><link href="http://localhost:8000/" rel="alternate"></link><link href="http://localhost:8000/feeds/dsm.atom.xml" rel="self"></link><id>http://localhost:8000/</id><updated>2015-07-10T00:00:00+03:00</updated><entry><title>Импорт конфигурационных файлов python</title><link href="http://localhost:8000/articles/ru/import-konfiguratsionnykh-failov-python.html" rel="alternate"></link><updated>2015-07-09T00:00:00+03:00</updated><author><name>ДСМ</name></author><id>tag:localhost:8000,2015-07-09:articles/ru/import-konfiguratsionnykh-failov-python.html</id><summary type="html">&lt;p&gt;Продолжаю (после перерыва) заметки для себя. Сейчас немного из области изучения python.&lt;/p&gt;
&lt;p&gt;Словари в python видятся мне как очень удобный инструмент для ведения конфигурационных файлов (любого вида, любой вложенности). Например, такого типа:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Confg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;num&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;there is a text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s"&gt;&amp;#39;list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
         &lt;span class="s"&gt;&amp;#39;dict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;d1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;d2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;werwe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Допустим, что такие файлы расположены в некоторой папке (т.е. в папке может быть нескольео питоновских файлов, и в каждом файле несколько конфигурационных объектов, предположительно словарей, но, в принципе, любых). Нужно собрать их вместе в один словарь.&lt;/p&gt;
&lt;p&gt;Покопавшись в доках (получилось поработать со стандратной документацией благодаря ограниченному доступу к Интернету) понял, что нужно использовать функцию &lt;code class="py python"&gt;&lt;span class="n"&gt;import_module&lt;/span&gt;&lt;/code&gt; из модуля &lt;code class="py python"&gt;&lt;span class="n"&gt;importlib&lt;/span&gt;&lt;/code&gt;. Предварительно нужно добавить папку в пути поиска инструкции import (список &lt;code class="py python"&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Если учесть возможность использования генераторов, получается такой довольно компактный &amp;quot;питонистичный&amp;quot; код:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;listdir&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;isdir&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sp&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;importlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;import_module&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c"&gt;# Берём некую папку (с проверкой существования)&lt;/span&gt;
    &lt;span class="n"&gt;PApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;r&amp;#39;/home/dsm/prg/python/set_proxy/app_cfg&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;isdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PApp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="c"&gt;# Получаем список py файлов в папке PApp,&lt;/span&gt;
    &lt;span class="c"&gt;# и если не найдено выходим,&lt;/span&gt;
    &lt;span class="c"&gt;# если найдено - добавляем в пути поискa и импортируем&lt;/span&gt;
    &lt;span class="n"&gt;apps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PApp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PApp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__getattribute__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
         &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;{0} =&amp;gt; {1}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;not found&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="python"></category></entry><entry><title>Переселяем pelican на github.</title><link href="http://localhost:8000/articles/ru/pereseliaem-pelican-na-github.html" rel="alternate"></link><updated>2015-07-10T00:00:00+03:00</updated><author><name>ДСМ</name></author><id>tag:localhost:8000,2014-12-15:articles/ru/pereseliaem-pelican-na-github.html</id><summary type="html">&lt;div class="contents topic" id="id2"&gt;
&lt;span id="id1"&gt;&lt;/span&gt;&lt;p class="topic-title first"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id18"&gt;Предисловие&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#dsmblog-github" id="id19"&gt;Перенос dsmblog на github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id20"&gt;github как веб-хостер&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id11" id="id21"&gt;Автоматизация и синхронизация&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;Предисловие&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;В предыдущих статьях, посвящённых генератору статических сайтов pelican были описаны основные &lt;a class="reference external" href="dsmblog-todo.html"&gt;задачи и цели&lt;/a&gt;, которые хотел решить работая с пеликаном, о описаны &lt;a class="reference external" href="pelican-minstart.html"&gt;начальные действия&lt;/a&gt; необходимые для того чтобы создать свой блог, поместить в нём пару статей и запустить на локальном сервере.&lt;/p&gt;
&lt;p&gt;Следующим шагом, по плану, необходимо разместить проект на каком-либо хостинге для проектов, а результат на веб‑хостинге.&lt;/p&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;Что нужно сделать&lt;/h3&gt;
&lt;p&gt;Итак, ориентировочный перечень задач:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Создать новый проект на github.&lt;/li&gt;
&lt;li&gt;Перенести код проекта dsmblog в созданный проект.&lt;/li&gt;
&lt;li&gt;Настроить синхронизацию.&lt;/li&gt;
&lt;li&gt;Разместить результат на github.io.&lt;/li&gt;
&lt;li&gt;Настроить синхронизацию для результирующего блога с хостингом.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="git"&gt;
&lt;h3&gt;Почему git&lt;/h3&gt;
&lt;p&gt;Выбор, в общем-то, между &lt;a class="reference external" href="https://github.com"&gt;github&lt;/a&gt; и &lt;a class="reference external" href="https://bitbucket.org"&gt;bitbucket&lt;/a&gt;. Оба хостинга имеют необходимый бесплатный функционал (мне пока нужно git и веб‑хостинг, возможность работать через SSL есть и там, и там). Субъективные оценки интерфейса старался не учитывать. Для себя отметил пока такие особенности ресурсов:&lt;/p&gt;
&lt;p&gt;github&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;имеет большое сообщество;&lt;/li&gt;
&lt;li&gt;не ограничивает количество человек в команде;&lt;/li&gt;
&lt;li&gt;не даёт права создавать бесплатные закрытые проекты;&lt;/li&gt;
&lt;li&gt;много маститых разработчиков размещают свои официальные репозитории на этом сервисе.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;bitbucket&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;предоставляет возможность создавать до пяти бесплатных приватных проектов (основное преимущество);&lt;/li&gt;
&lt;li&gt;ограничивает количество разработчиков для бесплатных проектов;&lt;/li&gt;
&lt;li&gt;сообщество довольно большое, хоть и поменьше чем у github;&lt;/li&gt;
&lt;li&gt;По маститости, вроде как поскромнее чем github.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В общем, если нужен приватный проект − однозначно bitbucket, в противном случае − скорее github.&lt;/p&gt;
&lt;p&gt;Так как прятать dsmmblog я не планирую, решил разместить на github.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference internal" href="#id1"&gt;Содержание&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dsmblog-github"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;Перенос dsmblog на github&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;Регистрация и установка git.&lt;/h3&gt;
&lt;p&gt;Если ещё раньше этого сделано не было (регистрация на github и | или установка git) − самое время.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://help.github.com/articles/signing-up-for-a-new-github-account"&gt;Регистрация на github&lt;/a&gt; предельно проста, хорошо описана (хоть и на английском, но понятно для того чтобы выбрать бесплатный вариант для обычного пользователя).&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://help.github.com/articles/set-up-git/#platform-linux"&gt;Установка git&lt;/a&gt; довольно проста (по крайней мере, в Linux). По поводу &lt;code class="bash"&gt;git config&lt;/code&gt; −изменения записываются в файл &lt;code class="bash"&gt;~/.gitconfig&lt;/code&gt; и могут легко быть исправлены и (или) дополнены. Более того, можно сразу создать (или скопировать из архива) этот файл.&lt;/p&gt;
&lt;p&gt;Мой файл конфигурации:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;user&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; UserName  &lt;span class="c"&gt;# user name&lt;/span&gt;
    &lt;span class="nv"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; User@e.mail  &lt;span class="c"&gt;# email address that will be associated with your Git commits&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;core&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;autocrlf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; input  &lt;span class="c"&gt;# settings for CRLF conversion&lt;/span&gt;
    &lt;span class="nv"&gt;safecrlf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;  &lt;span class="c"&gt;#  settings for CRLF conversion&lt;/span&gt;
    &lt;span class="nv"&gt;excludesfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ~/.gitexcludes  &lt;span class="c"&gt;# like .gitignore but for all projects&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;credential&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;helper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; cache --timeout&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3600&lt;/span&gt;  &lt;span class="c"&gt;# allow to input username and password once per timeout&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Есть вопрос выбора между SSL и HTTPS. Первый вариант (SSL), вроде даёт возможность не вводить каждый раз пароль и под Linux реализуется элементарно. Второй (HTTPS) рекомендован githib-ом + в комбинации с параметром &lt;code class="bash"&gt;&lt;span class="nv"&gt;helper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; cache --timeout&lt;span class="o"&gt;=&lt;/span&gt;3600&lt;/code&gt; позволяет вводить пароль только один раз за сеанс работы. В итоге я остановился на HTTPS (пошёл по пути наименьшего сопротивления).&lt;/p&gt;
&lt;p&gt;&lt;a class="reference internal" href="#id1"&gt;Содержание&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="github"&gt;
&lt;h3&gt;Хостим код на github&lt;/h3&gt;
&lt;p&gt;Вариант очевидный. Есть локальный dsmblog и есть одноимённый проект на github. Нужно синхронизировать. Можно, но сложно. Хотя, если на github совсем пустой проект, то не так уж и сложно. Но, как сказал классик, мы пойдём другим путём.&lt;/p&gt;
&lt;p&gt;Сохраняем свой проект под другим именем (например, dsmblog_local):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mv dsmblog dsmblog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Клонируем проект с github и инициализируем:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/dmisem/dsmblog.git &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;dsmblog &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git init
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Копируем проект:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cp -rf ../dsmblog_local/* ./
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Почти всё. Осталось настроить параметры синхронизации (назовём это так). Об этом в следующем подразделе.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;Локальные параметры&lt;/h3&gt;
&lt;p&gt;Локальные параметры:
* некоторые параметры из &lt;code class="bash"&gt;pelicanconf.py&lt;/code&gt;, которые не нужно выкладывать в общедоступную среду;
* настройки &lt;code class="bash"&gt;.gitignore&lt;/code&gt;, указывающие какие файлы не будут учитываться git и, соответственно, не будут залиты на github.&lt;/p&gt;
&lt;p&gt;Фрагмент &lt;code class="bash"&gt;pelicanconf.py&lt;/code&gt;, которые &amp;quot;подтягивают&amp;quot; данные из файла &lt;code class="bash"&gt;local_settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;local_settings&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;ls&lt;/span&gt;

&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AUTHOR&lt;/span&gt;
&lt;span class="n"&gt;SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SITENAME&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SITEURL&lt;/span&gt;
&lt;span class="n"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PATH&lt;/span&gt;
&lt;span class="n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TIMEZONE&lt;/span&gt;
&lt;span class="n"&gt;LOCALE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LOCALE&lt;/span&gt;
&lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Что должно быть в &lt;code class="bash"&gt;local_settings.py&lt;/code&gt;, по моему, очевидно.&lt;/p&gt;
&lt;p&gt;При работе с python3.4 возник нехороший нюанс - &lt;code class="py python"&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;/code&gt; не подтягивает фалы, которые расположены в той же папке, что и &lt;code class="bash"&gt;pelicanconf.py&lt;/code&gt;, можно решить явным добавлением пути проекта в &lt;code class="py python"&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;SITE_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;realpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SITE_ROOT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;local_settings&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;ls&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;подробно этот вопрос разбирается на &lt;a class="reference external" href="http://stackoverflow.com/questions/16981921/relative-imports-in-python-3"&gt;stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Мой &lt;code class="bash"&gt;.gitignore&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Generated by vim&lt;/span&gt;
.ropeproject/
__pycache__/

&lt;span class="c"&gt;# Generated by pelican&lt;/span&gt;
&lt;span class="c"&gt;# Folder output changed to dsmblog&lt;/span&gt;
&lt;span class="c"&gt;#   for pushing into gh-pages branch.&lt;/span&gt;
cache/
output/
/dsmblog/

&lt;span class="c"&gt;# temporary files&lt;/span&gt;
*.pid
&lt;span class="nb"&gt;test&lt;/span&gt;*
tmp*
*.pyc

&lt;span class="c"&gt;# local settings&lt;/span&gt;
local_settings.*
Makefile
fabfile.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Здесь считаю нужным отметить папки &lt;cite&gt;output/&lt;/cite&gt; и &lt;cite&gt;/dsmblog/&lt;/cite&gt;. На github хранится только код без результирующего сайта, Сам итоговый сайт будет размещён отдельно (подробнее в следующем разделе. Для этого потом папку &lt;cite&gt;output/&lt;/cite&gt; нужно будет переименовать в &lt;cite&gt;/dsmblog/&lt;/cite&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;Заливаем код&lt;/h3&gt;
&lt;p&gt;Добавляем свои файлы в индекс git:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Коммитим изменения (параметр &lt;cite&gt;-m&lt;/cite&gt; если коммитятся только изменения или добавления, для коммита также и удалений нужно использовать  &lt;cite&gt;-a&lt;/cite&gt;) и &amp;quot;пушим&amp;quot; (отправляем) изменения на github:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;first commit all project to github.&amp;quot;&lt;/span&gt;
git push
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Проходим авторизацию (если не используем SSL), заходим на сайт &lt;a class="reference external" href="https://github.com"&gt;https://github.com&lt;/a&gt; и авторизируемся (или обновляем страницу если уже там) и наблюдаем изменения.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;github как веб-хостер&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Веб-хостинг для проектов github располагается на сайте &lt;a class="reference external" href="https://pages.github.com"&gt;https://pages.github.com&lt;/a&gt; сайты называются Pages, подробная справка по адресу &lt;a class="reference external" href="https://help.github.com/categories/github-pages-basics/"&gt;https://help.github.com/categories/github-pages-basics/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Поддерживаются два типа страниц: страница пользователя (вариант с организацией я не рассматриваю) и страница проекта. Страницы (любого типа) можно создать (и потом редактировать) с помощью неплохого, простого генератора, который имеет небольшое количество довольно симпатичных шаблонов (правда, не отзывчивых).&lt;/p&gt;
&lt;p&gt;В учебно-практических целях остановился на таком варианте:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;создаю персональный сайт, где размещаю краткую информацию о себе и ссылки на свои проекты;&lt;/li&gt;
&lt;li&gt;создаю сайт проекта dsmblog куда помещаю созданный статический блог.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;Персональный сайт&lt;/h3&gt;
&lt;p&gt;Персональный сайт решил сделать с помощью встроенного генератора.&lt;/p&gt;
&lt;p&gt;Для этого строго по &lt;a class="reference external" href="https://help.github.com/articles/creating-pages-with-the-automatic-generator"&gt;инструкции по генерированию сайта&lt;/a&gt; создаю проект dmisem.github.io, и для нового проекта создаю сайт с помощью генератора (потом изменить с помощью генератора можно зайдя в меню Settings).&lt;/p&gt;
&lt;p&gt;На первом этапе корректируем на языке Markdown (сайт содержит довольно подробную инструкцию по markdown) наполнение, созданное генератором. На втором выбираем шаблон. Через несколько минут сайт будет доступен по адресу &lt;a class="reference external" href="http://dmisem.github.io/"&gt;http://dmisem.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;Статический блог (страница проекта).&lt;/h3&gt;
&lt;p&gt;Суть создания страницы проекта − создание независимой ветки gh-pages и размещение там статического сайта.&lt;/p&gt;
&lt;p&gt;Самый простой способ - создать страницу с помощью генератора (через команду меню Settings). Заодно можно посмотреть что содержит стандартная страница.&lt;/p&gt;
&lt;p&gt;Далее клонируем ветку внутрь папки проекта (таким образом внутри папки dsmblog будет создана ещё одна папка dsmblog) и инициализируем её:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone -b gh-pages https://github.com/dmisem/dsmblog.git &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;dsmblog &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git init
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;и вычищаем старое содержимое:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git rm -rf . &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -a &lt;span class="s2"&gt;&amp;quot;clear old content&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь возвращаемся в основной каталог и генерируем сайт во вновь созданную папку:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican -o dsmblog content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь записываем изменения на github:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;dsmblog &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git add . &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class="s2"&gt;&amp;quot;generated on timestamp&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Всё! Можно заходит на сайт &lt;a class="reference external" href="http://dmisem.github.io/dsmblog/"&gt;http://dmisem.github.io/dsmblog/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference internal" href="#id1"&gt;Содержание&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;Автоматизация и синхронизация&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Автоматизировать внесение изменений кода на github смысла не вижу.&lt;/p&gt;
&lt;p&gt;А вот работу с созданным сайтом вижу по такой схеме:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;сначала создаётся сайт в папке output;&lt;/li&gt;
&lt;li&gt;проверяется его работа на локальном сервере;&lt;/li&gt;
&lt;li&gt;если все в порядке, создаётся окончательная версия в папке dsmblog и отправляется на сервер.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Автоматизировать стоит только последний пункт. Для этого создан скрипт &lt;cite&gt;git.dsmblog.sh&lt;/cite&gt; с таким содержим:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="nv"&gt;DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/dsmblog&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;CDT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;date +%Y-%m-%d&lt;span class="se"&gt;\ &lt;/span&gt;%H:%M&lt;span class="sb"&gt;`&lt;/span&gt;  &lt;span class="c"&gt;# Current datetime&lt;/span&gt;
&lt;span class="nv"&gt;GT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;git --git-dir=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DIR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.git --work-tree=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DIR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &amp;quot;&lt;/span&gt;

pelican -o dsmblog content
&lt;span class="nb"&gt;echo &lt;/span&gt;Generated

&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;add . &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;commit -a -m &lt;span class="s2"&gt;&amp;quot;Autogenerate: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CDT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;push
&lt;span class="nb"&gt;echo &lt;/span&gt;Pushed!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference internal" href="#id1"&gt;Содержание&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="blog"></category><category term="pelican"></category><category term="github"></category></entry><entry><title>Запускаем пеликана.</title><link href="http://localhost:8000/articles/ru/zapuskaem-pelikana.html" rel="alternate"></link><updated>2014-11-26T17:20:00+02:00</updated><author><name>ДСМ</name></author><id>tag:localhost:8000,2014-11-30:articles/ru/zapuskaem-pelikana.html</id><summary type="html">&lt;div class="contents topic" id="id3"&gt;
&lt;span id="id2"&gt;&lt;/span&gt;&lt;p class="topic-title first"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id16"&gt;Предисловие&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id5" id="id17"&gt;Установка&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id18"&gt;Первый блог&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id12" id="id19"&gt;Статьи-продолжения&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;Предисловие&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;В статье &amp;quot;&lt;a class="reference external" href="dsmblog-todo.html"&gt;Задачи и цели проекта&lt;/a&gt;&amp;quot; были изложены мотивы, побудившие заняться пеликаном, определены задачи и цели, намечены основные шаги.&lt;/p&gt;
&lt;p&gt;Что такое пеликан, его возможности, и довольно подробная документация находится на официальном сайте документации &lt;a class="reference external" href="http://docs.getpelican.com"&gt;pelican&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Пока переводить её не планирую.&lt;/p&gt;
&lt;p&gt;Поэтому в этой статье рассмотрим первый шаг − старт пеликана. И особенности, которые возникли в моём случает.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference internal" href="#id2"&gt;Содержание&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;Установка&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Установка довольно простая. Через pip.&lt;/p&gt;
&lt;p&gt;Поэтому, сначала создаём виртуальное окружение (я использую &lt;a class="reference external" href="http://virtualenvwrapper.readthedocs.org"&gt;virtualenvwrapper&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkvirtualenv -a blog_project_path pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Устанавливаем pelican:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;или последнюю версию с &lt;a class="reference external" href="https://github.com/getpelican/pelican"&gt;github&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install -e &lt;span class="s2"&gt;&amp;quot;git+https://github.com/getpelican/pelican.git#egg=pelican&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Необходимо определиться с языком разметки для написания статей (ReStructuredText или Markdown). Markdown более популярен, так как несколько проще, но менее функционален. Я использую ReStructuredText, так нужны были его возможности (таблицы, include), потом установил &lt;a class="reference external" href="https://github.com/Rykka/riv.vim"&gt;riv&lt;/a&gt; и работать с текстом в &lt;a class="reference external" href="http://www.vim.org"&gt;vim&lt;/a&gt; стало совсем удобно. К тому же, ReStructuredText используется &lt;a class="reference external" href="http://sphinx-doc.org"&gt;sphinx&lt;/a&gt; для документирования кода в python (для генерирования документации). Пока документацию не генерировал, но ближайшем будущем к этому приду. Так что для меня вопроса с выбором ReStructuredText или Markdown не стоит. Markdown возможно установлю в будущем, чтобы поработать с его синтаксисом.&lt;/p&gt;
&lt;p&gt;Так как я sphinx пока не использую достаточно docutils (его устанавливать не нужно, он идет в зависимостях пеликана).&lt;/p&gt;
&lt;p&gt;Для выбравших Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install markdown
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Для начала работы все готово!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference internal" href="#id2"&gt;Содержание&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;Первый блог&lt;/a&gt;&lt;/h2&gt;
&lt;div class="contents local topic" id="id7"&gt;
&lt;p class="topic-title first"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id20"&gt;Создаем каркас проекта&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id9" id="id21"&gt;Создаем первую статью&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id10" id="id22"&gt;Устанавливает тему&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id11" id="id23"&gt;Конфигурируем&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Создаем каркас проекта&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Каркас создается простой командой:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Один важный момент. Если виртуальное окружение привязано к директории проекта (в папке окружения лежит файл .project, в котором указан соответствующая директория), то пеликан создаст каркас именно в этой директории независим от того, какая директория является текущей. Если возникает потребность создать второй блог, то нужно либо создавать ещё одно окружение, либо отвязывать окружение от папки проекта, либо согласовывать папки (или переименовать папку со старым блогом, или изменить папку проекта окружения).&lt;/p&gt;
&lt;p&gt;Теперь нужно ответить на вопросы (в принципе настройки потом можно поменять)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Welcome to pelican-quickstart v3.4.0.

This script will &lt;span class="nb"&gt;help &lt;/span&gt;you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.

Using project associated with current virtual environment.Will save to:
/home/***********

&amp;gt; What will be the title of this web site? dsmblog
&amp;gt; Who will be the author of this web site? ДСМ
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt; ru
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; What is your URL prefix? &lt;span class="o"&gt;(&lt;/span&gt;see above example&lt;span class="p"&gt;;&lt;/span&gt; no trailing slash&lt;span class="o"&gt;)&lt;/span&gt; http://localhost:8000
&amp;gt; Do you want to &lt;span class="nb"&gt;enable &lt;/span&gt;article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; How many articles per page &lt;span class="k"&gt;do&lt;/span&gt; you want? &lt;span class="o"&gt;[&lt;/span&gt;10&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want an auto-reload &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
Done. Your new project is available at /home/*********
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Пара замечаний:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Выбор языка по умолчанию. У меня выбор между английским, русским и украинским.
Английский я, к сожалению, знаю не на столько, чтобы на нем писать статьи.
Если выбирать между русским и украинским, то тут определяющими факторами есть
то, что русскоговорящее сообщество значительно больше,
и то, что планирую попытаться сделать авто-перевод статей и предполагаю, что с русского будет качественней
(хотя по этому поводу собираюсь изучить вопрос попозже).&lt;/li&gt;
&lt;li&gt;URL prefix лучше указывать даже если пока сайт будет работать на localhost.
Иначе будет выдаваться предупреждение (warning)&lt;/li&gt;
&lt;li&gt;Автоматизацию генерирования и публикации взял по умолчанию (автообновление сайта при внесении удобно).
Автообновление сайта при внесении изменений удобно,
а публикацию в вебе рассмотрю позже.&lt;/li&gt;
&lt;li&gt;Остальные параметры можно установить по умолчанию (или поменять на своё усмотрение).
В любом случае, их легко можно поменять позже.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В результате получим такую структуру:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dsmblog/
├── content/
│   └── &lt;span class="o"&gt;(&lt;/span&gt;pages&lt;span class="o"&gt;)&lt;/span&gt;
├── output/
├── Makefile
├── develop_server.sh
├── fabfile.py
├── pelicanconf.py       &lt;span class="c"&gt;# Main settings file&lt;/span&gt;
└── publishconf.py       &lt;span class="c"&gt;# Settings to use when ready to publish&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь можно сгенерировать блог:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Переходим в папку output/ и запускаем сервер (для python3):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python -m http.server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;или (для python2):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python -m SimpleHTTPServer
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;или (пеликан сам определит что и как запускать):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python -m pelican.server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь в броузере по адресу &lt;a class="reference external" href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt; можем посмотреть свой пустой блог.&lt;/p&gt;
&lt;p&gt;В дальнейшем удобнее использовать скрипт&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;develop_server.sh start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В этом случае все изменения в наполнении и установка блога будут вноситься автоматически. Иногда, правда, если где-то сделана ошибка и на сайте (блоге) изменеия не отображаются, можно остановить сервер &lt;code class="bash"&gt;develop_server.sh stop&lt;/code&gt;, пересобрать блог &lt;code class="bash"&gt;pelican content&lt;/code&gt; (обращая внимание на текущую папку) и заново запустить сервер.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference internal" href="#id6"&gt;Первый блог&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Создаем первую статью&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Пример можно взять с сайта документации &lt;a class="reference external" href="http://docs.getpelican.com"&gt;pelican&lt;/a&gt;, там же достаточно подробная инофрмация о по поводу наполнения статей. В том числе, ссылки на статические ресурсы вроде изображений, файлов pdf и т.п.&lt;/p&gt;
&lt;p&gt;Создаем файл с расширением .rst, наппример, my-super-post.&lt;/p&gt;
&lt;p&gt;Вносим метаданные и какой-нибудь текст&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;My super title&lt;/span&gt;
&lt;span class="gh"&gt;##############&lt;/span&gt;

&lt;span class="nc"&gt;:date:&lt;/span&gt; &lt;span class="nf"&gt;2010-10-03 10:20&lt;/span&gt;
&lt;span class="nc"&gt;:modified:&lt;/span&gt; &lt;span class="nf"&gt;2010-10-04 18:40&lt;/span&gt;
&lt;span class="nc"&gt;:tags:&lt;/span&gt; &lt;span class="nf"&gt;thats, awesome&lt;/span&gt;
&lt;span class="nc"&gt;:category:&lt;/span&gt; &lt;span class="nf"&gt;yeah&lt;/span&gt;
&lt;span class="nc"&gt;:slug:&lt;/span&gt; &lt;span class="nf"&gt;my-super-post&lt;/span&gt;
&lt;span class="nc"&gt;:authors:&lt;/span&gt; &lt;span class="nf"&gt;Alexis Metaireau, Conan Doyle&lt;/span&gt;
&lt;span class="nc"&gt;:summary:&lt;/span&gt; &lt;span class="nf"&gt;Short version for index and feeds&lt;/span&gt;

Какой-нибудь текст для моей первой супер-статьи.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Если запущен &lt;code class="bash"&gt;develop_server.sh&lt;/code&gt;, то просто обновляем страницу, если какой другой, то сначала перегенерируем сайт.&lt;/p&gt;
&lt;p&gt;Потом эту супер-страницу можно будет перезаписать, удалить или спрятать (&lt;code class="rest"&gt;&lt;span class="nc"&gt;:status:&lt;/span&gt; &lt;span class="nf"&gt;hiiden&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference internal" href="#id6"&gt;Первый блог&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Устанавливает тему&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Для работы с темами в пеликане есть инструмент &lt;code class="bash"&gt;pelican-themes&lt;/code&gt;, с помощью которого можно как установить готвые темы и использовать их потом только по названию. Или же можно использовать абсолютные или относительные (относительно папки проекта, например, &lt;code class="bash"&gt;themes/pelican-bootstrap3&lt;/code&gt;) пути к темам, которые содержат необходимые шаблоны.&lt;/p&gt;
&lt;p&gt;Можно шаблон использовать разово, собрав сайт с параметром &lt;code class="bash"&gt;-t&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican -t theme_or_path_to_theme content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;или, если тема будет использоваться постоянно, добавить параметр &lt;code class="bash"&gt;THEME&lt;/code&gt; в файле настроек &lt;code class="bash"&gt;pelicanconf.py&lt;/code&gt;. Например,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;themes/pelican-bootstrap3&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;При этом нужно, чтобы был установлен параметр&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;RELATIVE_URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Довольно большой перечень шаблонов можно найти на &lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;гитхабе&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Для себя хотел адаптивный шаблон, поэтому выбрал &lt;a class="reference external" href="https://github.com/DandyDev/pelican-bootstrap3"&gt;pelican-bootstrap3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Опять же, возможные вариаты установки хорошо описаны а сайте. Как вариант скопировать в подпапку проекта &lt;code class="bash"&gt;themes&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;themes
https://github.com/DandyDev/pelican-bootstrap3.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;и прописать как узано выше путь к файлу. В этом случае тема будет только для этого блога.&lt;/p&gt;
&lt;p&gt;Другой вариант установить тему в виртуальное окружение pelican (так я его назвал в начале статьи), потом установить через &lt;code class="bash"&gt;pelican-themes&lt;/code&gt; и подключать только по названию. В этом случае, легко можно создавать несколько блогов в одном окружении с этой темой.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference internal" href="#id6"&gt;Первый блог&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Конфигурируем&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Конфигурация блога задается с помощью параметров (переменных) в файле &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt;. Полный перечень переменных определяется темой.&lt;/p&gt;
&lt;p&gt;Сущестувует рекомендация разделять файл конфигурации, во-первых, для обеспечения конфиденциальности (персональные данные хранить в отдельном файле и не синхронизировать их с хостингом (включить в &lt;tt class="docutils literal"&gt;.gitignore&lt;/tt&gt;)), во-вторых, при большом объему логически разделять.&lt;/p&gt;
&lt;p&gt;Пока для себя необходимости такой не вижу. Поэтому глубже рассмотрю этот вопрос в другой раз.&lt;/p&gt;
&lt;p&gt;В целом, переменные, которые идут по умолчанию впполне понятны сами по себе. Часть из них устанавливается во время сздания каркаса, часть уже правили когда тему устанавливали.&lt;/p&gt;
&lt;p&gt;Поэтому, суть конфигурирования (на начальном этапе) посмотреть параметры и установить свои данные. Добавить (при желании), свои контакты с соц. сетях и т.п.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;На этом пока все.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference internal" href="#id6"&gt;Первый блог&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference internal" href="#id2"&gt;Содержание&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;Статьи-продолжения&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="pelican-github.html"&gt;Переселяем пеликана на github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- Links: --&gt;
&lt;/div&gt;
</summary><category term="blog"></category><category term="pelican"></category><category term="start"></category></entry><entry><title>Задачи и цели проекта dsmblog (Записки ДСМ)</title><link href="http://localhost:8000/articles/ru/dsmblog-todo.html" rel="alternate"></link><updated>2015-07-10T00:00:00+03:00</updated><author><name>ДСМ</name></author><id>tag:localhost:8000,2014-11-26:articles/ru/dsmblog-todo.html</id><summary type="html">&lt;div class="contents topic" id="id2"&gt;
&lt;span id="id1"&gt;&lt;/span&gt;&lt;p class="topic-title first"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id15"&gt;Предисловие&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id16"&gt;Предстроит сделать&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id10" id="id17"&gt;Уже сделано.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Предисловие&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;В процессе работы и самообучения возникло несколько задач, которые подвигли на создание этого блога.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Во-первых&lt;/strong&gt;, необходимость записывать для себя определённые настройки, последовательность действий, технологии, функции и т.п. Такого рода задач возникают регулярно при изучении разных технологий в программировании и при администрировании. Фактически, при решении задач, которые иногда приходится повторять (а, при возможности и автоматизировать). При этом в сети есть много блогов, статей, форумов которые дают ответы почти на все вопросы; но всегда есть особенности, которые отличают поставленную задачу от того, что рассматривается в статьях. Кроме того, форумы иногда закрываются, чужие статьи теряются, ... В общем, довольно важной видится задача создавать и как-то организовывать заметки для себя, в первую очередь. А если ещё кому-нибудь пригодится, будет замечательно.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Во-вторых&lt;/strong&gt;, возникло желание приобщиться в веб-технологиям, точнее к веб-программированию. Причины объяснять смысла нету − такое желание есть у многих, да и не тема это данной статьи. Один из побудительных мотивов − расширение сферы применения Python изучением которого уже некоторое время занимаюсь (пока для себя на уровне написания скриптов для системы). В результате предварительного ознакомления с веб-технологиями решил сначала посмотреть в сторону статических сайтов, потом уже копать или в сторону солидных back-end фреймворков (django и pyramid), или чуть поглубже копнуть во front-end (JQuery, bootstrap, AngularJS − что-то в этом роде).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;В-третьих,&lt;/strong&gt; некоторое время уже работаю с ReStructuredText. Зачем понадобился язык разметки и почему именно ReST возможно напишу в другой статье (посвящённой именно этому инструменту). Но использование ReST в качестве языка для написания заметок для меня было бы несомненным плюсом.&lt;/p&gt;
&lt;p&gt;В контексте вышесказанного выбор pelican как генератор статического блога на python с поддержкой ReST в качестве одного из основных языков разметки для ведения своих заметок и хранения (выкладывания) их в сети выглядит очевидным.&lt;/p&gt;
&lt;p&gt;Этапы, детали и нюансы работы с pelican опишу в следующей заметке. Сейчас просто рассмотрю что хочется получить в итоге. Статью со временем планирую править (до определённого логического предела, стараясь не плодить принципиально нового функционала, а только уточнять запланированное раньше и перемещать сделанное). Уже реализованную часть не удаляю, а перемещаю в конец статьи.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference internal" href="#id1"&gt;Содержание&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Предстроит сделать&lt;/a&gt;&lt;/h2&gt;
&lt;div class="contents local topic" id="id5"&gt;
&lt;p class="topic-title first"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id18"&gt;Доработка интерфейса&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id7" id="id19"&gt;Мультиязычность&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id20"&gt;Автоматизация&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id9" id="id21"&gt;Расширение функциональности&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Доработка интерфейса&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Создать свой логотип и favicon и прикрутить к сайту.&lt;/li&gt;
&lt;li&gt;Изучить возможности выбранной темы и применить всё, что считаю нужным для себя.&lt;/li&gt;
&lt;li&gt;Может добавить свой значек для контактов&lt;/li&gt;
&lt;li&gt;Добавить-изменить &amp;quot;под себя&amp;quot;:&lt;ul&gt;
&lt;li&gt;продумать и записать в этой статье;&lt;/li&gt;
&lt;li&gt;реализовать и описать в другой статье.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Сделать варианты день-ночь, цвет-монохром.&lt;/li&gt;
&lt;li&gt;Создать авторскую стартовую страницу.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Мультиязычность&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Изучить стандартные возможности (встроенные) по интернационализации.
Насколько понял, есть возможность переводить статьи, не знаю как ведет система при отсутствии статьи в одном языке и наличии в другом. Кроме того, насколько понял, язык интерфейса один − установленый по умолчанию.&lt;/li&gt;
&lt;li&gt;Возможности по интернационализации интерфейса.&lt;/li&gt;
&lt;li&gt;Возможности по переводу статей (особенно в плане автоперевода или автоссылки не статьи с существующим переводом).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Автоматизация&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;создание статьи:&lt;ul&gt;
&lt;li&gt;выбор существующей категрии или создание новой;&lt;/li&gt;
&lt;li&gt;выбор тегов (по категории или из всех) или создание новых.&lt;/li&gt;
&lt;li&gt;создание заголовков (слагов) чтбы не дубировалсь.&lt;/li&gt;
&lt;li&gt;создание и подскаска по другим метаполям (метатегам).&lt;/li&gt;
&lt;li&gt;создание статей на других языках (с ссылками на основной)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Управление статьями (на будущее)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Расширение функциональности&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Изучить вопрос функциональности блогов в целом (как статических таки динамических) определится что мне нужно сейчас и что может понадобится в ближайшем будущем.&lt;/p&gt;
&lt;p&gt;Пока предварительные выводы из сайта &lt;a class="reference external" href="http://www.unix-lab.org/posts/pelican"&gt;http://www.unix-lab.org/posts/pelican&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;robots.txt;&lt;/li&gt;
&lt;li&gt;карта сайта;&lt;/li&gt;
&lt;li&gt;google analitycs;&lt;/li&gt;
&lt;li&gt;комментарии.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference internal" href="#id1"&gt;Содержание&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Уже сделано.&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;В этом разделе расположены задачи, которые уже выполнены и описаны в блоге. Поэтому для заданий (подразделов) будет указана ссылка на статью в которой описано решение задачи.&lt;/p&gt;
&lt;div class="contents local topic" id="id11"&gt;
&lt;p class="topic-title first"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id12" id="id22"&gt;Минимальный старт&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#github" id="id23"&gt;Перенос на github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Минимальный старт&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Описано в статье &amp;quot;&lt;a class="reference external" href="pelican-minstart.html"&gt;Запускаем пеликана&lt;/a&gt;&amp;quot;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Установить минимальный набор инструментов необходимый для работы с pelican.&lt;/li&gt;
&lt;li&gt;Создать свой блог (dsmblog).&lt;/li&gt;
&lt;li&gt;Выбрать и установить отзывчивую (резиновую) тему.&lt;/li&gt;
&lt;li&gt;Написать пару заметок-статей (эту и описанние процесса)&lt;/li&gt;
&lt;li&gt;Отладить работу на локальном сервере.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="github"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Перенос на github&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Описано в статье &amp;quot;&lt;a class="reference external" href="pelican-github.html"&gt;Переселяем пеликана на github&lt;/a&gt;&amp;quot;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Создание репозитория на github&lt;/li&gt;
&lt;li&gt;Перенос уже готовых статей в созданный репозиторий&lt;/li&gt;
&lt;li&gt;Настройка local_settings.py&lt;/li&gt;
&lt;li&gt;Минимальная автоматизация внесения изменений в репозиторий&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference internal" href="#id1"&gt;Содержание&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="blog"></category><category term="about"></category></entry><entry><title>reStructuredText и сложные документы.</title><link href="http://localhost:8000/articles/ru/restructuredtext-i-slozhnye-dokumenty.html" rel="alternate"></link><updated>2014-12-08T00:00:00+02:00</updated><author><name>ДСМ</name></author><id>tag:localhost:8000,2014-08-30:articles/ru/restructuredtext-i-slozhnye-dokumenty.html</id><summary type="html">&lt;div class="contents topic" id="id2"&gt;
&lt;span id="id1"&gt;&lt;/span&gt;&lt;p class="topic-title first"&gt;Содержание&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id19"&gt;Почему и зачем&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id20"&gt;Приступаем к работе&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#odt" id="id21"&gt;Формат в odt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id11" id="id22"&gt;Нумерация рисунков и таблиц&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id13" id="id23"&gt;Обычный текст с отступом&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id14" id="id24"&gt;Ссылка на литературу&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id15" id="id25"&gt;Ещё раз про рисунки в odt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id16" id="id26"&gt;Выравнивание в таблицах&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;Почему и зачем&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&amp;quot;Давно хотелось&amp;quot;&lt;/h3&gt;
&lt;p&gt;Давно хотелось освоить средство (назовём пока так, дабы не не путаться с языками, редакторами, процессорами....) для простой работы с обычными текстами (как большими так и маленькими), желательно в vim, с такими возможностями:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;отделение контента от форматирования;&lt;/li&gt;
&lt;li&gt;разбивка на &amp;quot;атомы&amp;quot; с возможностью повторного использования без копипастинга;&lt;/li&gt;
&lt;li&gt;простое создание форматированного текста;&lt;/li&gt;
&lt;li&gt;возможность создания &amp;quot;сложных&amp;quot; документов (с рисунками, таблицами, автооглавлением, перекрёстными ссылками, списком литературы);&lt;/li&gt;
&lt;li&gt;вывод в форматы doc(x), odt(ods), pdf, html, возможно Wiki и LaTeX (последний на практике использовать не приходилось, поэтому интерес чисто теоретический);&lt;/li&gt;
&lt;li&gt;использовать для документирования кода (python, про другие не думал, а в Delphi­Lazarus использовал javadoc­подобное документирование).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;Почему reStructuredText&lt;/h3&gt;
&lt;p&gt;В качестве вариантов рассматривал reStructuredText, markdown, LaTeX, Wiki, LibreOffice Writer (с конвертацией куда надо), может что ещё было раньше (вроде DocBook) что отбросил сразу (сейчас не помню). Как по мне, reStructuredText подошёл для этих нужд наилучшим образом. Если кратко, почему не подходят другие.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;markdown&lt;/strong&gt; слабоват, если не разбираться с каким‑либо из расширенных вариантов.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LaTeX&lt;/strong&gt; сложноват для просто набора текста, особенно если учесть, что LaTeX в чистом виде на практике мне не нужен.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LibreOffice Writer&lt;/strong&gt; использовал и продолжаю пока использовать как основной WYSiWYG текстовый процессор. Из него неплохо получается конвертировать в pdf и doc(x), чем и пользуюсь :), но остальные пожелания из &lt;a class="reference internal" href="#id4"&gt;&amp;quot;Давно хотелось&amp;quot;&lt;/a&gt; либо нереализуемы, либо требуют нетривиальных действий, на которые не хочется тратить время.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wiki-подобная&lt;/strong&gt; разметка очень удобна для небольших текстов, но для описанных выше задач подходит слабо.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;reStructuredText дополнительно к пожеланиям из &lt;a class="reference internal" href="#id4"&gt;&amp;quot;Давно хотелось&amp;quot;&lt;/a&gt; имеет &lt;strong&gt;дополнительные плюсы&lt;/strong&gt; (как для меня, не скажу, что киллер­фичи, но приятно :))&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;для программирования на python язык &amp;quot;родной&amp;quot;.&lt;/li&gt;
&lt;li&gt;в vim уже встроена подсветка, а для более удобной работы есть замечательный &lt;a class="reference external" href="https://github.com/Rykka/riv.vim"&gt;Rykka/riv.vim&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docutils.sourceforge.net/"&gt;docutils&lt;/a&gt; оказался довольно удобным и мощным. К слову, популярный pandoc отбросил сразу, так как он не собирает из разных &amp;quot;атомарных&amp;quot; частей через директиву &lt;em&gt;include.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;формулы (бывает нужно, не часто, но бывает).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;Приступаем к работе&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Возникла задача создать довольно большой документ, который можно будет потом вывести и в LibreOffice writer (в определённом формате) и в html.&lt;/p&gt;
&lt;p id="structure"&gt;Сразу создал структуру:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;для каждого раздела отдельную папку ./S01/ -- ./S13/;&lt;/li&gt;
&lt;li&gt;папку для рисунков ./img/;&lt;/li&gt;
&lt;li&gt;файл заголовков ./head.rst.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В каждой папке для разделов сохраняю каждый &amp;quot;атомарный&amp;quot; файл с &amp;quot;говорящим&amp;quot; названием. Например, ./S10/03.01.rst означает соответствующий уровень вложения. Глубже мне было не нужно. Файл заголовков содержит необходимые данные:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;  ..&lt;/span&gt; &lt;span class="nt"&gt;|date|&lt;/span&gt; &lt;span class="ow"&gt;date&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; %d.%m.%Y
&lt;span class="p"&gt;  ..&lt;/span&gt; &lt;span class="nt"&gt;|time|&lt;/span&gt; &lt;span class="ow"&gt;date&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; %H:%M

&lt;span class="p"&gt;  ..&lt;/span&gt; &lt;span class="ow"&gt;sectnum&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;

  ######################################
  Системний аналіз економічних процесів.
  ######################################
      &lt;span class="nc"&gt;:Створено:&lt;/span&gt; &lt;span class="nf"&gt;|date| |time|&lt;/span&gt;
      &lt;span class="nc"&gt;:Авторський колектив:&lt;/span&gt; &lt;span class="nf"&gt;**Я** и др.&lt;/span&gt;

  ----

&lt;span class="p"&gt;  ..&lt;/span&gt; &lt;span class="ow"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; Зміст.
      &lt;span class="nc"&gt;:backlinks:&lt;/span&gt; &lt;span class="nf"&gt;entry&lt;/span&gt;
      &lt;span class="nc"&gt;:depth:&lt;/span&gt; &lt;span class="nf"&gt;4&lt;/span&gt;

и небольшой скрипт, который соберет все вкучу:
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.. include:: head.rst&amp;quot;&lt;/span&gt; &amp;gt; index.rst
find ./S*/ -name &lt;span class="s2"&gt;&amp;quot;*.rst&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s|\.\/|..  iclude:: |g&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; index.rst
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В результате получаем файл, index.rst из которого с помощью rst2html rst2odt получаем нужные форматы. Всё-бы хорошо, но есть несколько &amp;quot;но&amp;quot;, решение которых в Интернете по-быстрому найти не получилось:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#odt"&gt;Формат в odt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id11"&gt;Нумерация рисунков и таблиц&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="odt"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;Формат в odt&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Для получение удобоваримого формата воспользовался инструкцией &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/user/odt.html#styles-used-by-odtwriter"&gt;styles-used-by-odtwriter&lt;/a&gt; . Проблем особых не было (со стилями в офисах давно работаю). Но возникло несколько существенных моментов, которые пришлось &amp;quot;допиливать&amp;quot; через &lt;a class="reference external" href="https://wiki.openoffice.org/wiki/API/Tutorials/StarBasic"&gt;StarBasic&lt;/a&gt;. Чтоб побыстрее воспользовался командой &lt;a class="reference external" href="https://help.libreoffice.org/Common/Recording_a_Macro/ru"&gt;запись макроса&lt;/a&gt;  (или &lt;a class="reference external" href="http://habrahabr.ru/post/121149/"&gt;на хабре&lt;/a&gt;) и дальнейшей его правкой. Потом &lt;a class="reference external" href="https://help.libreoffice.org/Common/Events/ru"&gt;поставил его на событие&lt;/a&gt; открытие файла. Нужно было обновить оглавление и очистить форматы. Оглавление автоматически само не обновляется, а в заголовках рисунков  иногда &amp;quot;вылезало&amp;quot; кривое форматирование. Поэтому сначала каждый раз при открытии вручную проделывал указанные операции, потом решил автоматизировать. &lt;a class="reference external" href="http://www.script-coding.com/OOo/OOo_HelloWorld.html"&gt;Неплохая статья по этому поводу&lt;/a&gt; и &lt;a class="reference external" href="http://stackoverflow.com/questions/18755381/how-to-update-the-table-of-contents-in-an-odt-document-with-delphi-and-the-com"&gt;ещё один сайт&lt;/a&gt; по поводу обновления оглавления.&lt;/p&gt;
&lt;p&gt;Текст макроса:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;sub&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;
    &lt;span class="k"&gt;dim&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;   &lt;span class="ow"&gt;as&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;
    &lt;span class="k"&gt;dim&lt;/span&gt; &lt;span class="n"&gt;dispatcher&lt;/span&gt; &lt;span class="ow"&gt;as&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;
    &lt;span class="n"&gt;document&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ThisComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CurrentController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Frame&lt;/span&gt;
    &lt;span class="n"&gt;dispatcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createUnoService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.sun.star.frame.DispatchHelper&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;dispatcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;executeDispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.uno:UpdateCurIndex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;dispatcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;executeDispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.uno:SelectAll&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;dispatcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;executeDispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.uno:ResetAttributes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;sub&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Макрос скорее всего &amp;quot;допилить&amp;quot; немного придется с учетом приведенных выше ссылок. Здесь пока как пример возможности. Пока для меня это не первостепенная задача. Если будет интересно, могу отладить и в отдельной статье описать подробнее.&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Ну это пол дела. Есть ещё пара задачек:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id11"&gt;Нумерация рисунков и таблиц&lt;/a&gt; Нужно не только в офисе, но и для любого выходного формата, поэтому рассмотрел в отдельном разделе.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id13"&gt;Обычный текст с отступом&lt;/a&gt; Задача оказалась довольно нетривиальной, поэтому тоже рассмотрел отдельно.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id22"&gt;Нумерация рисунков и таблиц&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Думал, что не сильно нужно, но в процессе работы оказалось что ошибся. В Интернете готового решения не нашёл. Поэтому придумал своё.&lt;/p&gt;
&lt;p&gt;В файл заголовков (см. &lt;a class="reference internal" href="#structure"&gt;structure&lt;/a&gt;) добавил такие строчки:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;.. Figures&lt;/span&gt;
&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;|fig10010301|&lt;/span&gt; &lt;span class="ow"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; 10.1.
&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;|fig10030201|&lt;/span&gt; &lt;span class="ow"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; 10.2.
&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;|fig10030202|&lt;/span&gt; &lt;span class="ow"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; 10.3.

&lt;span class="cp"&gt;.. Tables&lt;/span&gt;
&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;|tbl10030201|&lt;/span&gt; &lt;span class="ow"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; 10.1.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;а в тексте ссылку записал таким образом:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;_fig10030201:&lt;/span&gt;
&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; img/SPPR.png
   &lt;span class="nc"&gt;:align:&lt;/span&gt; &lt;span class="nf"&gt;center&lt;/span&gt;

   Рис. |fig10030201|  Структура СППР.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;В итоге&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Нумерацию могу писать как угодно (с учётом раздела или сплошную для всего документа), причём, один раз. В принципе, если объектов много, можно разнести в отдельные файлы (например, figures.rst, tables.rst ...) и нумерацию автоматизировать.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Если нужно добавить в раздел объект ссылочное имя ему нужно давать следующее, даже если объект вставляется между существующими. Например, если добавить в 10-й раздел 2-й рисунок файл заголовок изменится таким образом:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;.. Figures&lt;/span&gt;

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;|fig10010301|&lt;/span&gt; &lt;span class="ow"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; 10.1.

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;|fig10030201|&lt;/span&gt; &lt;span class="ow"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; 10.2.
&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;|fig10030203|&lt;/span&gt; &lt;span class="ow"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; 10.3.
&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;|fig10030202|&lt;/span&gt; &lt;span class="ow"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; 10.4.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Следить за таким файлом отдельно по каждному &amp;quot;атомарному файлу&amp;quot;, не сложно.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Я получил простой, легко контролируемый способ нумерации объектов, который, как по мне, даже удобнее чем в родном LibreOffice.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Как дополнение, аналогично можно организовать &lt;a class="reference internal" href="#id14"&gt;ссылки на литературу&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id23"&gt;Обычный текст с отступом&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;В чем проблема.&lt;/strong&gt; Когда работаю со стилями в офисе для текста использую стиль &amp;quot;обычный текст&amp;quot;, а остальные стили основываю на &amp;quot;базовый&amp;quot;. Основные отличия:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;В &lt;cite&gt;основном&lt;/cite&gt; стиле выравниваю по ширине, а в &lt;cite&gt;базовом&lt;/cite&gt; по левому краю;&lt;/li&gt;
&lt;li&gt;В &lt;cite&gt;основном&lt;/cite&gt; делаю отступ для первой строки, а в &lt;cite&gt;базовом&lt;/cite&gt; без отступов.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;docutils использует только rststyle-textbody. Вроде мелочь, сделал rststyle-textbody основным. Но после этого &amp;quot;поехало&amp;quot; форматирование в таблице, потом в полях, а потом, возможно, поедет ещё где-то. Пытаться создавать отдельно стили для таблиц, потом для полей, потом для того что ещё, может быть, поедет занятие бессмысленное. Тем более, что прикрутить эти стили задача тоже нетривиальная. Поэтому я решил сделать таким способом:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;создать стиль rststyle-textbase;&lt;/li&gt;
&lt;li&gt;обычный абзац форматировать именно этим стилем.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;По поводу 1-го пункта вопросов нету, а со 2-м пришлось малость повозиться.&lt;/p&gt;
&lt;p&gt;Сначала обычный текст просто поместил в контейнер: &lt;code&gt;.. container:: textbase&lt;/code&gt;. Сразу неудобства: первое - много писать (хотя, в vim можно и забиндить на hotkeys); второе - принципиальнее - текст нормально не подсвечивается.&lt;/p&gt;
&lt;p&gt;Попытка сделать по-быстрому через &lt;code&gt;.. |tt| replace:: .. container:: textbase&lt;/code&gt; успехом не увенчалась, поэтому я решил проще. Добавил в начале каждого абзаца по &amp;quot;тт &amp;quot;, а потом в скрипте для сборки заменил на то, что нужно. &amp;quot;тт &amp;quot; а не &amp;quot;tt &amp;quot; потому что текст в основном печатается кириллицей (кстати, ещё один &amp;quot;+&amp;quot; этого метода). Это уже что-то, но писать в начале каждой строчки свои спецсимволы я посчитал тоже неправильным. Я решил, что простым текстом (в reStructuredText) можно считать все что начинается  большой буквы, а следующий абзац не содержит ничего.&lt;/p&gt;
&lt;p&gt;В итоге скрипт для сборки сделал таким:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.. include:: head.rst&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;span class="nv"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;..  container:: textbase\n    \n    &amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; f in &lt;span class="sb"&gt;`&lt;/span&gt;find ./S*/ -name &lt;span class="s2"&gt;&amp;quot;*.rst&amp;quot;&lt;/span&gt; -print &lt;span class="p"&gt;|&lt;/span&gt; sort&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    cat &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;$ G&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s2"&gt;&amp;quot;:a;/^[А-ЯІЇ]/N; s/^\([А-ЯІЇ]\)\([^\n]*\)\(\n&lt;/span&gt;&lt;span class="nv"&gt;$\&lt;/span&gt;&lt;span class="s2"&gt;)/&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$txt&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;\1\2\n/g;ta&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s2"&gt;&amp;quot;s/^тт /&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$txt$&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;/g&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Небольшой &lt;em&gt;комментарий:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;sed '$ G'&lt;/code&gt; -- добавил пустую строчку в конце, чтобы не потерять последний абзац;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sed &amp;quot;:a;/^[А-Я]/N; s/^\([А-Я]\)\([^\n]*\)\(\n$\)/&amp;quot;&amp;quot;$txt&amp;quot;&amp;quot;\1\2\n/g;ta&amp;quot;&lt;/code&gt; -- делаю нужную вставку для абзацев с кириллицей;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sed &amp;quot;s/^тт /&amp;quot;&amp;quot;$txt$&amp;quot;&amp;quot;/g&amp;quot;&lt;/code&gt; -- оставляю себе возможность, явно указать текст с отступом.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Замечание:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;данный раздел касается пока только odt;&lt;/li&gt;
&lt;li&gt;такое решение не влияет на вывод для html;&lt;/li&gt;
&lt;li&gt;при необходимости для html вопрос решается элементарно созданием стиля &lt;cite&gt;textbase.&lt;/cite&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id24"&gt;Ссылка на литературу&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;С учётом сказанного в разделе &lt;a class="reference internal" href="#id11"&gt;Нумерация рисунков и таблиц&lt;/a&gt; список литературы приобретает такой вид:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;|And98|&lt;/span&gt; &lt;span class="ow"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; 1
&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;|Wei11|&lt;/span&gt; &lt;span class="ow"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; 2

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;_And98:&lt;/span&gt;

|And98|. Andersson M.K. On the Effects of Imposing or Ignoring Long Memory When Forecasting // Working Paper Series in Economics and Finance, 1998.

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;_Wei11:&lt;/span&gt;

|Wei11|. Weilkiens T. Systems Engineering with SysML/UML: Modeling, Analysis, Design. - Morgan Kaufmann, 2011
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;А ссылка на литературу принимает такой вид: &lt;code&gt;[|Wei11|_]&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id25"&gt;Ещё раз про рисунки в odt&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Рисунки получаются довольно неплохо (я использую директиву &lt;code&gt;.. figure::&lt;/code&gt;). Сам рисунок помещается в кадр с заголовком. Ширина кадра рассчитывается по ширине рисунка. По идее, есть атрибут &lt;code&gt;:figwidth:&lt;/code&gt;, но задание этому атрибуту явного значения ничего на давало. Попытки изменить минимальную ширину в стиле &lt;cite&gt;rststyle_figureframe&lt;/cite&gt; тоже ничего не дали.&lt;/p&gt;
&lt;p&gt;Вопрос возник потому что плохо выглядит длинный заголовок для узкого рисунка.&lt;/p&gt;
&lt;p&gt;Потому, я решил вопрос по другому -- внёс изменения в файл: &lt;cite&gt;docutils/writers/odf_odt/__init__.py&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_element&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
    &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_image_scaled_width_height&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Заменил на&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_element&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;docutils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_image_scaled_width_height&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_image_scaled_width_height&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь &lt;code&gt;:figwidth:&lt;/code&gt; работает так как мне нужно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id16"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id26"&gt;Выравнивание в таблицах&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Отсутствие выравнивания в таблицах существенный недостаток reStructuredText. Пока в этот вопрос не углублялся. Нашёл &lt;a class="reference external" href="http://mbless.de/4us/typo3-oo2rest/06-The-%5Bfield-list-table%5D-directive/1-demo.rst.html"&gt;итересный ресурс&lt;/a&gt; по этому поводу. Насколько понял, официально в docutils этот инструмент в ближайшее время вряд ли попадёт -- есть некоторые неоднозначности и действия &amp;quot;по умолчанию&amp;quot;, с которыми не согласны авторы docutils.&lt;/p&gt;
&lt;p&gt;Для себя решил по быстрому (костылём). В принципе, в самой таблице можно явно указать стиль: &lt;code&gt;.. container:: centeredtextbody&lt;/code&gt; (такой стиль есть по умолчанию), а для того, чтобы получить объединённые ячейки в заголовках использую grid-таблицу. В этом случае использование контейнера делает таблицу центрированный столбец очень широким. Вот если бы можно было задавать ширину столбцов (для директивы &lt;code&gt;.. table::&lt;/code&gt; такого не предусмотрено). Для этого вношу изменение в файл &lt;cite&gt;docutils/parsers/rst/directives/tables.py&lt;/cite&gt;. В класс &lt;code&gt;class RSTTable(Table)&lt;/code&gt; добавляю опцию:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;option_spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;widths&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;directives&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;positive_int_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;directives&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;class_option&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;directives&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unchanged&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;а в функцию &lt;code&gt;def run(self)&lt;/code&gt;, этого класса дописываю фрагмент:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;widths&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;col_widths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;widths&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col_widths&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;table_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tagname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;colspec&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;table_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;colwidth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;col_widths&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;З.Ы.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Сейчас кое-что переделал (возможности оставил те же, изменил (унифицировал) реализацию и настройку).&lt;/p&gt;
&lt;p&gt;Об этом в следующей статье на эту тему (Когда напишу вставлю ссылку).&lt;/p&gt;
&lt;/div&gt;
</summary><category term="reStructuredText"></category><category term="docutils"></category><category term="LibreOffice"></category></entry></feed>